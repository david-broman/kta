
======== LLVM asm file =============

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.7.0"

define i32 @main() nounwind uwtable ssp {
entry:
  %call = tail call float @llvm.mytest(float 0x40263851E0000000, i32 44) nounwind
  ret i32 0
}

====================================


======== Bitcode file ===============

# The first 5 * 4 = bytes is the header. Each 32 bit 
# word is enoded in little endian format.

0000000 de c0 17 0b   
# The magic number 0x0B17C0DE

0000004 00 00 00 00 
# Version number. Current number is 0

0000008 14 00 00 00 
# Offset in the file. Value 0x14 = 20. That is, the 
# where the bitcode stream starts.

000000C 64 02 00 00
# The size in bytes of the stream. 0x0264 = 612 bytes.
# If we add the header of 20 bytes, we have 
# 632 bytes = 0x278. The total length of the file 
# 640 bytes, so there are 8 bytes missing. Maybe we have 
# an ending? TODO - figure this out!

0000010 07 00 00 01 
# CPU type. This is the last word of the header.

0000014 42 43 |c0 de 
#       A     |B
# A: The first two bytes represents the magic number for 
#    a bitstream "BC" = "\x42\x43". This indicates the start
#    of a bit stream.
#
# B: Bytes 3 and 4 "\xc0\xde" represents the magic number
#    specific for LLVM IR.

0000018 21 0c 00 00 96 00 00 00
# 0x21 = 0010 00|01
#        B1     |A
#  A: The abbreviation id is 1 =  ENTER_SUBBLOCK 
#     The abbreviation id is fixed width and is 2 from the beginning.
# 0x0c = 00|00 11|00
#          |C    |B2
#
#  B: The blockid encoded as a vbr8, 0000 1000 = 8 = MODULE_BLOCK
#  C: New abbreviation length 0011 = 3. That is, within MODULE_BLOCK
#     all abbreviation lengths will be 3 instead of 2.
#  
#  The block length is 32 bit alligned, meaning that 00 00 is inserted.
#  Block length = 0x00000096 = 150 number of 32-bit words. 
#  The 32-bits block length value is store in little endian.

0000020(32) 01 10 00 00 12 00 00 00 
# 0x01 = 0000 0|001
#        B1    |A 
#  A: The abbreviation id is 001 = 1 =  ENTER_SUBBLOCK 
# 0x10 =  0|001 0|000
#          |C    |B2
# 
#  B: Block id 0 = BLOCK_INFO
#
#  C: New abbreviation length 0010b = 2 
#
#  Alignment of 32bit making the block length appear
#  in as 0x00000012 = 18

0000028(40) 07 81 23 
# 0x07 = 0000 01|11
#        B      |A
# A: Abbreviation id = 11 = 3 = UNABBREV_RECORD
# B: Code = 000001 = 1 = SETBID 
#
# 0x81 = 10|00 0001
#        D1|C
# C: Number of ops = 000001 = 1
# 
# 0x23 = 0010 |0011
#             |D2
# D: Option number 1: 001110 = 14 = VALUE_SYMTAB_BLOCK
# bits left = 0010

000002B(43) 91 41 c8 04 49
# bits from previous: 00|10
#                     B1|A
# A: abbreviation id = 2 = DEFINE_ABBR
#    
#  This is the first definition in this block, so
#  we define abbreviation id = 4 (for block 14)
# 
# 0x91 = 1|001|0   |001 
#         |O1b |O1a |B2
# B: Number of abbrev ops - 000100 = 4
# 
# 0x41 = |010 |0  |0001
#        |O2b |O2a|O1c    
# O1: The first bit is 0 making it a non-literal. The code is 
#     001b = 1 = Fixed. Hence, the next 5 bits are 00011=3 
#     meaning that the fixed operand have 3 bits.
#
# 0xc8 = 11 |0  |0 1000
#        O3b|O3a|O2c
# O2: The first bit is 0 making it a non-literal. The code
#     is 010b = 2 = VBR operand. The next 5 bits are 
#     01000b = 8, meaning the the bit width of the VBR is 8.
#
# 0x04 =   000|0 01|0  |0
#          O4c|O4b |O4a|O3b
# O3: The first bit is 0 making it a non-literal. The code
#     is 011b = 3 = Array operand. 
#
# 0x49 = 0100 10|01
#               |O4c
# O4: The first bit is 0 making it a non-literal. The code
#     is 001b = 1 = Fixed. The next 5 bits are 
#     01000b = 8, meaning the the bit width of the fixed int 
#     is 8. This means that we have an array of 8bits integers.
#
# bites left: 01 0010

0000030 06 10 32 39 92 01 84 0c 25 05 08 19 1e 04 8b 62
# bits from previous: 01 00|10
#                     B1   |A
# A: abbreviation id = 2 = DEFINE_ABBR                       
# 
# This is the second definition in this block, so 
# we define abbreviation id = 4 (for block 14)
# 
# 0x06 = 0000 011|0
#                |B2
# b: Number of abbrev operands 00100b = 4
#
#
#













0000030 06 10 32 39 92 01 84 0c 25 05 08 19 1e 04 8b 62
0000040 80 0c 45 02 42 92 0b 42 64 10 32 14 38 08 18 49
0000050 0a 32 44 24 48 0a 90 21 23 c4 52 80 0c 19 21 72
0000060 24 07 c8 c8 10 62 a8 a0 a8 40 c6 f0 01 00 00 00
0000070 49 18 00 00 06 00 00 00 0b 84 ff ff ff ff 1f c0
0000080 10 06 41 10 04 85 05 c2 ff ff ff ff 0f 60 00 00
0000090 89 20 00 00 0b 00 00 00 32 22 c8 08 20 64 85 04
00000a0 93 21 a4 84 04 93 21 e3 84 a1 90 14 12 4c 86 8c
00000b0 0b 84 64 4c 10 1c 73 04 60 50 02 50 66 00 ca b0
00000c0 81 38 02 00 13 32 7c c0 03 3b f8 05 3b a0 83 36
00000d0 08 07 78 80 07 76 28 87 36 68 87 70 18 87 77 98
00000e0 07 7c 88 03 38 70 83 3b 70 03 38 d8 10 13 e5 d0
00000f0 06 f0 a0 07 76 40 07 7a 60 07 74 a0 07 76 40 07
0000100 6d 90 0e 71 a0 07 78 a0 07 78 d0 06 e9 80 07 7a
0000110 80 07 7a 80 07 6d 90 0e 71 60 07 7a 10 07 76 a0
0000120 07 71 60 07 6d 90 0e 73 20 07 7a 30 07 72 a0 07
0000130 73 20 07 6d 90 0e 76 40 07 7a 60 07 74 a0 07 76
0000140 40 07 6d 60 0e 73 20 07 7a 30 07 72 a0 07 73 20
0000150 07 6d 60 0e 76 40 07 7a 60 07 74 a0 07 76 40 07
0000160 6d 60 0f 76 40 07 7a 60 07 74 a0 07 76 40 07 6d
0000170 60 0f 71 20 07 78 a0 07 71 20 07 78 a0 07 71 20
0000180 07 78 d0 06 e1 00 07 7a 00 07 7a 60 07 74 d0 06
0000190 f3 00 07 7a 60 07 74 a0 07 76 40 07 6d 60 0e 78
00001a0 00 07 7a 10 07 72 80 07 7a 10 07 72 80 07 6d e0
00001b0 0e 78 a0 07 71 60 07 7a 30 07 72 a0 07 76 40 07
00001c0 6d 30 0b 71 20 07 78 30 44 11 00 00 08 00 00 00
00001d0 80 21 4a 01 04 00 00 00 00 00 e4 61 00 00 00 00
00001e0 0c 00 00 00 33 08 80 1c c4 e1 1c 66 14 01 3d 88
00001f0 43 38 84 c3 8c 42 80 07 79 78 07 73 98 71 0c e6
0000200 00 0f ed 10 0e f4 80 0e 33 0c 42 1e c2 c1 1d ce
0000210 a1 1c 00 00 71 20 00 00 05 00 00 00 06 40 30 00
0000220 d2 58 c0 b2 2c 15 e3 33 d8 44 48 13 00 00 00 00
0000230 61 20 00 00 0f 00 00 00 13 04 41 2c 10 00 00 00
0000240 04 00 00 00 84 c2 1a 01 a0 8d 11 bc 34 3c ce 60
0000250 00 00 00 00 23 06 85 10 04 84 90 43 38 10 00 00
0000260 03 00 00 00 07 50 10 cd 14 61 56 40 08 c0 b2 00
0000270 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0000280


====================== output from llvm-bcanalyzer ==========

Summary of intrinsics.bc:
         Total size: 
        Stream type: LLVM IR
  # Toplevel Blocks: 1

Per-block Summary:
  Block ID #0 (BLOCKINFO_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 0
        Num Abbrevs: 0
        Num Records: 0

  Block ID #8 (MODULE_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 6
        Num Abbrevs: 0
        Num Records: 4
    Percent Abbrevs: 0.0000%

	Record Histogram:

  Block ID #9 (PARAMATTR_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 0
        Num Abbrevs: 0
        Num Records: 2
    Percent Abbrevs: 0.0000%

	Record Histogram:

  Block ID #11 (CONSTANTS_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 0
        Num Abbrevs: 0
        Num Records: 5
    Percent Abbrevs: 60.0000%

	Record Histogram:

  Block ID #12 (FUNCTION_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 2
        Num Abbrevs: 0
        Num Records: 3
    Percent Abbrevs: 33.3333%

	Record Histogram:

  Block ID #14 (VALUE_SYMTAB):
      Num Instances: 2
         Total Size: 
       Average Size: 
  Tot/Avg SubBlocks: 0/0.000000e+00
    Tot/Avg Abbrevs: 0/0.000000e+00
    Tot/Avg Records: 4/2.000000e+00
    Percent Abbrevs: 100.0000%

	Record Histogram:

  Block ID #15 (METADATA_BLOCK):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 0
        Num Abbrevs: 0
        Num Records: 5
    Percent Abbrevs: 0.0000%

	Record Histogram:

  Block ID #17 (TYPE_BLOCK_ID):
      Num Instances: 1
         Total Size: 
      Num SubBlocks: 0
        Num Abbrevs: 6
        Num Records: 8
    Percent Abbrevs: 50.0000%

	Record Histogram:

